#include <iostream>
#include <fstream>
#include <conio.h>
#include <sstream>
#include <string>
using namespace std;
struct node
{
	int info;
	node* l, * r;
};

node* tree = NULL;


void push(int a, node** t)
{
	if ((*t) == NULL)
	{
		(*t) = new node;
		(*t)->info = a;
		(*t)->l = (*t)->r = NULL;
		return;
	}
	if (a > (*t)->info) push(a, &(*t)->r);
	else push(a, &(*t)->l);
}

void print(node* t, int u)
{
	if (t == NULL) return;
	else
	{
		print(t->l, ++u);
		for (int i = 0; i < u; ++i)
		{
			cout << "|";
		}
		cout << t->info << endl;
		u--;
	}
	print(t->r, ++u);
}
void ReadFile(node* t)
{
	string line;
	int temp;
	ifstream in("num.txt");
	if (in.is_open())
	{
		while (getline(in, line))
		{
			in >> temp;
			push(temp, &tree);
		}
	}
	in.close();
}
//node *deleteNode(struct node *root, int key) {
//    if (root == NULL) return root;
//    if (key < root->info)
//        root->l = deleteNode(root->l, key);
//    else if (key > root->info)
//        root->r = deleteNode(root->r, key);
//    else {
//        if (root->l == NULL) {
//            struct node* temp = root->r;
//            //free(root);
//            return temp;
//        }
//        else if (root->r == NULL) {
//            struct node* temp = root->l;
//            //free(root);
//            return temp;
//        }
//    }
//    return root;
//}

node* deleteNode(node* root, int k)
{
	// Base case
	if (root == NULL)
		return root;

	// Recursive calls for ancestors of
	// node to be deleted
	if (root->info > k) {
		root->l = deleteNode(root->l, k);
		return root;
	}
	else if (root->info < k) {
		root->r = deleteNode(root->r, k);
		return root;
	}

	// We reach here when root is the node
	// to be deleted.

	// If one of the children is empty
	if (root->l == NULL) {
		node* temp = root->r;
		delete root;
		return temp;
	}
	else if (root->r == NULL) {
		node* temp = root->l;
		delete root;
		return temp;
	}

	// If both children exist
	else {

		node* succParent = root;

		// Find successor
		node* succ = root->r;
		while (succ->l != NULL) {
			succParent = succ;
			succ = succ->l;
		}

		// Delete successor.  Since successor
		// is always left child of its parent
		// we can safely make successor's right
		// right child as left of its parent.
		// If there is no succ, then assign
		// succ->right to succParent->right
		if (succParent != root)
			succParent->l = succ->r;
		else
			succParent->r = succ->r;

		// Copy Successor Data to root
		root->info = succ->info;

		// Delete Successor and return root
		delete succ;
		return root;
	}
}



void del(node*& Tree) {
	if (Tree != NULL)
	{
		del(Tree->l);
		del(Tree->r);
		delete Tree;
		Tree = NULL;
	}
}

bool isEvenParity(int x)
{
	if (x % 2 == 0)
		return true;
	else
		return false;
}
void DeleteParity(node* t, node** root)
{
	int* p;
	int x;

	if (t == NULL) return;
	else
	{

		p = &t->info;

		x = *p;

		if (t->l != NULL)
		{
			DeleteParity(t->l, root);
		}
		if (t->r != NULL)
		{
			DeleteParity(t->r, root);
		}
		if (isEvenParity(x))
		{
			deleteNode(*root, x);
		}
	}

}

int main()
{

	ReadFile(tree);
	cout << "Tree : \n";
	print(tree, 0);

	// deleteNode(tree, 7);
	DeleteParity(tree, &tree);
	cout << "Tree after deleting : \n";
	print(tree, 0);
	del(tree);
	cin.ignore().get();
}
